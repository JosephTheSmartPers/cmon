const { Client, Message, EmbedBuilder, SlashCommandBuilder, CommandInteraction, PermissionFlagsBits } = require("discord.js")

const names = {
    "food": "query",
    "cuisines": "cuisine",
    "diet": "diet",
    "intolerances": "intolerances",
    "type": "type",
    "minutes": "maxReadyTime",
    "apiKey": "apiKey"
}

module.exports = {
    ...new SlashCommandBuilder()
    .setName("recipe")
    .setDescription("Get a recipe for any dish")
    .addStringOption(option => option.setName("food").setDescription("The food u wanna get a recipe for").setRequired(true))
    .addStringOption(option => option.setName("cuisines").setDescription("The cuisine the food is from.").addChoices(
        {name: "African", value: "african"},
        {name: "American", value: "american"},
        {name: "British", value: "british"},
        {name: "Cajun", value: "cajun"},
        {name: "Caribbean", value: "caribbean"},
        {name: "European", value: "european"},
        {name: "French", value: "french"},
        {name: "German", value: "german"},
        {name: "Greek", value: "greek"},
        {name: "Indian", value: "indian"},
        {name: "Irish", value: "irish"},
        {name: "Italian", value: "italian"},
        {name: "Japanese", value: "japanese"},
        {name: "Jewish", value: "jewish"},
        {name: "Korean", value: "korean"},
        {name: "Mediterranean", value: "mediterranean"},
        {name: "Mexican", value: "mexican"},
        {name: "Nordic", value: "nordic"},
        {name: "Southern", value: "southern"},
        {name: "Spanish", value: "spanish"},
        {name: "Thai", value: "thai"},
        {name: "Vietnamese", value: "vietnamese"},
    ))
    .addStringOption(option => option.setName("diet").setDescription("The type of diet the food is compatible with.").addChoices(
        {name: "Gluten Free", value: "Gluten Free"},
        {name: "Ketogenic", value: "Ketogenic"},
        {name: "Vegetarian", value: "Vegetarian"},
        {name: "Lacto-Vegetarian", value: "Lacto-Vegetarian"},
        {name: "Ovo-Vegetarian", value: "Ovo-Vegetarian"},
        {name: "Vegan", value: "Vegan"},
        {name: "Pescetarian", value: "Pescetarian"},
        {name: "Paleo", value: "Paleo"},
        {name: "Primal", value: "Primal"},
        {name: "Low FODMAP", value: "LowFODMAP"},
        {name: "Whole30", value: "Whole30"},
    ))
    .addStringOption(option => option.setName("intolerances").setDescription("The intolerances you have").addChoices(
        {name: "Dairy", value: "Dairy"},
        {name: "Egg", value: "Egg"},
        {name: "Gluten", value: "Gluten"},
        {name: "Grain", value: "Grain"},
        {name: "Peanut", value: "Peanut"},
        {name: "Seafood", value: "Seafood"},
        {name: "Sesame", value: "Sesame"},
        {name: "Shellfish", value: "Shellfish"},
        {name: "Soy", value: "Soy"},
        {name: "Sulfite", value: "Sulfite"},
        {name: "Tree Nut", value: "Tree Nut"},
        {name: "Wheat", value: "Wheat"},
    ))
    .addStringOption(option => option.setName("type").setDescription("Type of recipe.").addChoices(
        {name: "main course", value: "main course"},
        {name: "side dish", value: "side dish"},
        {name: "dessert", value: "dessert"},
        {name: "appetizer", value: "appetizer"},
        {name: "salad", value: "salad"},
        {name: "bread", value: "bread"},
        {name: "breakfast", value: "breakfast"},
        {name: "soup", value: "soup"},
        {name: "beverage", value: "beverage"},
        {name: "sauce", value: "sauce"},
        {name: "marinade", value: "marinade"},
        {name: "fingerfood", value: "fingerfood"},
        {name: "snack", value: "snack"},
        {name: "drink", value: "drink"},
    ))
    .addIntegerOption(option => option.setName("minutes").setDescription("The maximum time it takes to prepare the dish.").setMinValue(1))
    ,

    run: async (client, interaction, args) => {

        await interaction.reply(`Searching the for the perfect recipe <a:loading:1026905223031173150>`)

        let url = "https://api.spoonacular.com/recipes/complexSearch?"

        args._hoistedOptions.push({name: "apiKey", value: "0926b0e1faa741b8969ba39f26883f00"})

        args._hoistedOptions.forEach(arg=>{
            if(url.split("")[url.length - 1] != "?") url += `&`
            url += `${names[arg.name]}=${arg.value}`
        })



        console.log(url)

        await fetch(url)
        .then(response => {
            if(!response.ok){
                return interaction.editReply("something went wrong :(")
            }
            return response.json()
        })
        .then(data => {
            satData = data[Math.floor(Math.random() * data.length)]
            let imageURL = `https://api.nasa.gov/EPIC/archive/${args.getString("type")}/${satData.date.split(" ")[0].split("-").join("/")}/png/${satData.image}.png?api_key=5tSZHL8HvM27ftFM7cCTunI1eh9RrxV6lpf6hfF1`
            let embed = new EmbedBuilder()
                .setTitle(`${satData.caption}`)
                .addFields(
                    {name: "Date:", value: `${year}-${month}-${day}`, inline: true},
                    {name: "Latitude:", value: `${satData.centroid_coordinates.lat}`, inline: true},
                    {name: "Latitude:", value: `${satData.centroid_coordinates.lon}`, inline: true}
                )
    
                .setColor("Purple")
                .setImage(imageURL)
                .setFooter({text: satData.date})
                interaction.editReply({content: "", embeds: [embed]})    
        })
        .catch(error => {
            
            console.log(error)
            return interaction.editReply("something went wrong :(")
        })
        
        

	}
}

